<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!-- Generated by {%COWIKI_FULL_NAME%} ({%COWIKI_HOME%}) -->

<html>
<head>
<title>{%PAGE_TITLE%}</title>

<meta name="generator" content="{%COWIKI_FULL_NAME%}, {%COWIKI_HOME%}">
<meta name="robots" content="{%META_ROBOT_INDEX%}">
<meta name="keywords" content="{%META_KEYWORDS%}">
<meta name="mssmarttagspreventparsing" content="true">
<meta name="revisit-after" content="{%DOCUMENT_REVISIT_AFTER%} days">
<meta http-equiv="content-type" content="text/html; charset={%I18N_CHARSET%}">

<base href="{%COWIKI_BASE_HREF%}">

<style type="text/css" media="screen">
<!--

  a {
    color: {%COLOR_LINK%};
  }

  a:active {
    color: {%COLOR_ALINK%};
  }

  a:visited {
    color: {%COLOR_VLINK%};
  }

  p, ol, ul, li, dl, dt, dd, blockquote {
    font-family: {%FONT_FAMILY%};
    font-size: {%FONT_SIZE%};
    text-align: {%FONT_ALIGN%};
    color: {%COLOR_TEXT%};
  }

  p {
    margin-top: 14px;
    margin-bottom: 16px;
  }

  td, th {
    font-family: {%FONT_FAMILY%};
    font-size: {%FONT_SIZE%};
    color: {%COLOR_TEXT%};
    font-weight: 500;
  }

  span {
    font-size: {%FONT_SIZE%};
    color: {%COLOR_TEXT%};
    font-weight: 500;
  }

  blockquote {
    margin-right: 0px;
  }

  h1, h2, h3, h4, h5, h6  {
    color: {%COLOR_TEXT%};
    font-weight:500;
    margin-top:10px;
  }

  h1 { font-size: 150%; }
  h2 { font-size: 130%; }
  h3 { font-size: 120%; }
  h4 { font-size: 110%; }
  h5 { font-size: 100%; font-style: italic; }
  h6 { font-size: 100%; font-style: italic; }

  pre, tt {
    font-family: monospace;
  }

  pre.code {
    padding: 5px;
    border-style: solid;
    border-width: 1px;
    border-color: #CCCCCC;
    background-color: #F4F4F4;
  }

  hr  {
    display: block;
    width: 100%;
    height: 1px;
    border-width: 0px;
    padding: 0px;
    background-color: #CCCCCC;
    color: #CCCCCC;
  }

  input, textarea  {
    font-family: monospace;
    color: {%COLOR_TEXT%};
    font-size: 15px;
    border-width: 1px;
  }

  input.submit {
    font-family: {%FONT_FAMILY%}, Arial, Helvetica, sans-serif;
    font-size: {%FONT_SIZE%};
    background-color:{%COLOR_TUBORG_CONTENT%};
    border-width: 1px;
    color: {%COLOR_LINK%};
  }

  textarea {
    padding-left: 2px;
  }

  select {
    font-family: monospace;
    font-size: 13.9px;
    color: {%COLOR_TEXT%};
  }

  fieldset {
    margin: 0px;
    padding: 5px;
  }

  legend {
    font-size: 92%;
  }

  /* ------------------------------------------------------------------*/

  .area {
    border-style: solid;
    border-width: 1px;
    border-left-color: {%COLOR_TUBORG_SHADOW%};
    border-top-color: {%COLOR_TUBORG_SHADOW%};
    border-right-color: {%COLOR_TUBORG_HIGHLIGHT%};
    border-bottom-color: {%COLOR_TUBORG_HIGHLIGHT%};
    background-color: {%COLOR_BGCOLOR%};
  }

  .areaoverflow {
    overflow: auto;
    border-style: solid;
    border-width: 1px;
    border-left-color: {%COLOR_TUBORG_SHADOW%};
    border-top-color: {%COLOR_TUBORG_SHADOW%};
    border-right-color: {%COLOR_TUBORG_HIGHLIGHT%};
    border-bottom-color: {%COLOR_TUBORG_HIGHLIGHT%};
    padding: 3px;
    background-color: {%COLOR_BGCOLOR%};
  }

  .areainset {
    border-style: solid;
    border-width: 1px;
    border-left-color: {%COLOR_TUBORG_SHADOW%};
    border-top-color: {%COLOR_TUBORG_SHADOW%};
    border-right-color: {%COLOR_TUBORG_HIGHLIGHT%};
    border-bottom-color: {%COLOR_TUBORG_HIGHLIGHT%};
    padding: 3px;
  }

  .window {
    border-style: outset;
    border-width: 2px;
    border-right-width: 1px;
    border-bottom-width: 1px;
    border-left-color: {%COLOR_TUBORG_HIGHLIGHT%};
    border-top-color: {%COLOR_TUBORG_HIGHLIGHT%};
    border-right-color: {%COLOR_TUBORG_SHADOW%};
    border-bottom-color: {%COLOR_TUBORG_SHADOW%};
  }

  .wintitle {
    font-family: {%FONT_FAMILY%};
    background-color: {%COLOR_WINDOW_BAR%};
    color: {%COLOR_WINDOW_BAR_TEXT%};
    font-weight: bold;
    font-size: 13.4px;
  }

  .tuborgbox {
    border-style: solid;
    border-width: 1px;
    border-top-color: {%COLOR_TUBORG_HIGHLIGHT%};
    border-left-color: {%COLOR_TUBORG_HIGHLIGHT%};
    border-right-color: {%COLOR_TUBORG_SHADOW%};
    border-bottom-color: {%COLOR_TUBORG_SHADOW%};
  }

  .tuborgboxsimple {
    border-style: solid;
    border-width: 1px;
    border-color: {%COLOR_TUBORG_SHADOW%};
  }

  .rappsbox {
    border-style: solid;
    border-width: 1px;
    border-top-color: {%COLOR_RAPPS_HIGHLIGHT%};
    border-left-color: {%COLOR_RAPPS_HIGHLIGHT%};
    border-right-color: {%COLOR_RAPPS_SHADOW%};
    border-bottom-color: {%COLOR_RAPPS_SHADOW%};
  }

  .rappsboxsimple {
    border-style: solid;
    border-width: 1px;
    border-color: {%COLOR_RAPPS_SHADOW%};
  }

  .spacer {
    font-size: 2px;
  }

  .error {
    color: {%COLOR_ERROR%};
  }

  .missing {
    color: {%COLOR_ERROR%};
    text-decoration: none;
  }

  .monospace {
    font-family: monospace;
    font-size: 92%;
  }

  .diff {
    font-family: monospace;
    font-size: 92%;
  }

  .label {
    font-size: 92%;
    text-decoration: none;
    color: {%COLOR_LINK%};
  }

  .label:visited {
    color: {%COLOR_LINK%};
  }

  .labeldisabled {
    font-size: 92%;
    text-decoration: none;
    color: #999999;
  }

  .textbut {
    background-color: {%COLOR_TUBORG_CONTENT%};
    border-style: solid;
    border-width: 1px;
    border-top-color: {%COLOR_TUBORG_HIGHLIGHT%};
    border-left-color: {%COLOR_TUBORG_HIGHLIGHT%};
    border-right-color: {%COLOR_TUBORG_SHADOW%};
    border-bottom-color: {%COLOR_TUBORG_SHADOW%};
    padding-top: 1px;
    padding-bottom: 2px;
  }

  .imgbut {
    border-style: solid;
    border-width: 1px;
    border-top-color: {%COLOR_TUBORG_HIGHLIGHT%};
    border-left-color: {%COLOR_TUBORG_HIGHLIGHT%};
    border-right-color: {%COLOR_TUBORG_SHADOW%};
    border-bottom-color: {%COLOR_TUBORG_SHADOW%};
  }

  .breadcrumb {
    font-size:90%;
  }

  .breadcrumb:visited {
    color: {%COLOR_LINK%};
  }

  .menubottom {
  }

  .menubottom:visited {
    color: {%COLOR_LINK%};
  }

  .tiny {
    font-family: {%FONT_FAMILY%};
    font-size: 11px;
  }

  .small {
    font-family: {%FONT_FAMILY%};
    font-size: 12px;
  }

  .medium {
    font-family: {%FONT_FAMILY%};
    font-size: 13px;
  }

  .big {
    font-family: {%FONT_FAMILY%};
    font-size: 20px;
  }

  .wheel {
    color: {%COLOR_WHEEL_USER%};
  }

-->
</style>

<script language="JavaScript" type="text/javascript">
<!--

  // Do not remove (or change) the JavaScript part, and wonder about errors.
  // First change your plugins and templates not to use these functions.
  // Never use JavaScript for essential functionalities! You may use it
  // for uncritical and superfluous gimmicks.

  window.onerror = null;
  var undefined;

  // ----------------------------------------------------------------------

  function getParentNodeByName(obj, tag) {
    if (!obj.parentNode) { return false; }

    if (obj.parentNode.nodeName.toLowerCase() == tag.toLowerCase()) {
      return obj.parentNode;
    }

    return getParentNodeByName(obj.parentNode, tag);
  }

  // ----------------------------------------------------------------------

  function getPrevSiblingNodeByName(obj, tag) {
    if (!obj.previousSibling) { return false; }

    if (obj.previousSibling.nodeName.toLowerCase() == tag.toLowerCase()) {
      return obj.previousSibling;
    }

    return getPrevSiblingNodeByName(obj.previousSibling, tag);
  }

  // ----------------------------------------------------------------------

  function getNextSiblingNodeByName(obj, tag) {
    if (!obj.nextSibling) { return false; }

    if (obj.nextSibling.nodeName.toLowerCase() == tag.toLowerCase()) {
      return obj.nextSibling;
    }

    return getNextSiblingNodeByName(obj.nextSibling, tag);
  }

  // ----------------------------------------------------------------------

  function fireClickEvent(nodeId) {
    if (typeof event == 'object') {
      if (event.button == 2 || event.button == 3) {
        return;
      }
    }

    if (document.getElementById) {
      if (obj = document.getElementById(nodeId)) {
        obj.click();
      }
    }
  }

  // ----------------------------------------------------------------------

  function fireClickEventOnChild(obj, tag) {
    if (typeof event == 'object') {
      if (event.button == 2 || event.button == 3) {
        return;
      }
    }

    if (obj.hasChildNodes) {
      for (i=0; i<obj.childNodes.length; i++) {
        if (obj.childNodes[i].nodeName.toLowerCase() == tag.toLowerCase()) {

          if (obj.childNodes[i].click) {
            obj.childNodes[i].click();
            break;
          }

        }
      }
    }
  }

  // ----------------------------------------------------------------------

  function mover(obj, color) {
    if (color == undefined) {
      obj.style.backgroundColor = '{%COLOR_HOVER%}';
    } else {
      obj.style.backgroundColor = color;
    }
  }

  // ----------------------------------------------------------------------

  function mout(obj, color) {
    if (color == undefined) {
      obj.style.backgroundColor = '{%COLOR_TUBORG_CONTENT%}';
    } else {
      obj.style.backgroundColor = color;
    }
  }

  // ----------------------------------------------------------------------

  function moverOnParentName(obj, tag, color) {
    newObj = getParentNodeByName(obj, tag);
    if (!newObj) { return; }

    if (color == undefined) {
      mover(newObj);
    } else {
      mover(newObj, color);
    }
  }

  // ----------------------------------------------------------------------

  function moutOnParentName(obj, tag, color) {
    newObj = getParentNodeByName(obj, tag);
    if (!newObj) { return; }

    if (color == undefined) {
      mout(newObj);
    } else {
      mout(newObj, color);
    }
  }

  // ----------------------------------------------------------------------

  function moverOnPrevSiblingName(obj, tag, color) {
    newObj = getPrevSiblingNodeByName(obj, tag);
    if (!newObj) { return; }

    if (color == undefined) {
      mover(newObj);
    } else {
      mover(newObj, color);
    }
  }

  // ----------------------------------------------------------------------

  function moutOnPrevSiblingName(obj, tag, color) {
    newObj = getPrevSiblingNodeByName(obj, tag);
    if (!newObj) { return; }

    if (color == undefined) {
      mout(newObj);
    } else {
      mout(newObj, color);
    }
  }

  // ----------------------------------------------------------------------

  function moverOnNextSiblingName(obj, tag, color) {
    newObj = getNextSiblingNodeByName(obj, tag);
    if (!newObj) { return; }

    if (color == undefined) {
      mover(newObj);
    } else {
      mover(newObj, color);
    }
  }

  // ----------------------------------------------------------------------

  function moutOnNextSiblingName(obj, tag, color) {
    newObj = getNextSiblingNodeByName(obj, tag);
    if (!newObj) { return; }

    if (color == undefined) {
      mout(newObj);
    } else {
      mout(newObj, color);
    }
  }

  // ----------------------------------------------------------------------

  function getCssClassByName(className) {
      var sheets = document.styleSheets;

      for (var i=0; i<sheets.length; i++) {

          // IE
          if (sheets[i].rules) {
              for (var j=0; j<sheets[i].rules.length; j++) {
                  if (sheets[i].rules[j].selectorText == '.' + className) {
                      return sheets[i].rules[j];
                  }
              }
          }

          // Gecko
          if (sheets[i].cssRules) {
              for (var j=0; j<sheets[i].cssRules.length; j++) {
                  if (sheets[i].cssRules[j].selectorText == '.' + className) {
                      return sheets[i].cssRules[j];
                  }
              }
          }

          return null;
      }
  }

  // ----------------------------------------------------------------------

  function setClassStyle(className, styleName, styleVal) {
      classObj = getCssClassByName(className);

      if (classObj) {
          eval('classObj.style.' + styleName + ' = "' + styleVal + '";');
      }
  }

//-->
</script>

</head>